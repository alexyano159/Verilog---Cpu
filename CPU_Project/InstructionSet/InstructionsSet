# Custom CPU Instruction Set Documentation

## 1. Instruction Format
opcode[31:27] | rd[26:22] | rs1[21:17] | rs2[16:12] | immediate/padding[11:0]
| Field   | Bits | Description                |
|---------|------|---------------------------|
| Opcode  | 5    | Operation type            |
| rd      | 5    | Destination register      |
| rs1     | 5    | Source register 1         |
| rs2     | 5    | Source register 2         |
| Imm     | 12   | Immediate value / unused  |
| **Total** | **32** |                           |

## 2. Opcode Table
| Opcode | Mnemonic | Operation                     | Description                              |
|--------|----------|-------------------------------|------------------------------------------|
| 00000  | ADD      | rd = rs1 + rs2                | Addition                                 |
| 00001  | SUB      | rd = rs1 - rs2                | Subtraction                              |
| 00010  | AND      | rd = rs1 & rs2                | Bitwise AND                              |
| 00011  | OR       | rd = rs1 \| rs2               | Bitwise OR                               |
| 00100  | XOR      | rd = rs1 ^ rs2                | Bitwise XOR                              |
| 00101  | NOR      | rd = ~(rs1 \| rs2)            | Bitwise NOR                              |
| 00110  | SLT      | rd = (rs1 < rs2)              | Set on less than                         |
| 00111  | SLL      | rd = rs1 << 1                 | Shift left logical                       |
| 01000  | SRL      | rd = rs1 >> 1                 | Shift right logical                      |
| 01001  | NOT      | rd = ~rs1                     | Bitwise NOT                              |
| 01010  | INC      | rd = rs1 + 1                  | Increment                                |
| 01011  | DEC      | rd = rs1 - 1                  | Decrement                                |
| 01100  | ROL      | rd = rotate left rs1          | Rotate left                              |
| 01101  | ROR      | rd = rotate right rs1         | Rotate right                             |
| 01110  | PASSB    | rd = rs2                      | Pass-through B                           |
| 01111  | PASSA    | rd = rs1                      | Pass-through A                           |
| 10000  | LOAD     | rd = MEM[rs1 + imm]           | Load from memory                         |
| 10001  | STORE    | MEM[rs1 + imm] = rs2          | Store to memory                          |
| 10010  | JUMP     | PC = imm                      | Unconditional jump                       |
| 10011  | BEQ      | if (rs1 == rs2) branch        | Branch if equal                          |
| 10100  | BNE      | if (rs1 != rs2) branch        | Branch if not equal                      |
| 10101  | BLT      | if (rs1 < rs2) branch         | Branch if less than                      |
| 10110  | BGT      | if (rs1 > rs2) branch         | Branch if greater than                   |
| 10111  | BGE      | if (rs1 >= rs2) branch        | Branch if greater than or equal          |
| 11000  | BLE      | if (rs1 <= rs2) branch        | Branch if less than or equal             |